// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(fullname, username, password, permission, login_provider)
VALUES ($1, $2, $3, $4, $5)
RETURNING user_id, username, password, permission, login_provider, provider_id, account_id, created_at, fullname, phone, address, avatar
`

type CreateUserParams struct {
	Fullname      *string `json:"fullname"`
	Username      *string `json:"username"`
	Password      *string `json:"password"`
	Permission    int32   `json:"permission"`
	LoginProvider *int32  `json:"login_provider"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Fullname,
		arg.Username,
		arg.Password,
		arg.Permission,
		arg.LoginProvider,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Permission,
		&i.LoginProvider,
		&i.ProviderID,
		&i.AccountID,
		&i.CreatedAt,
		&i.Fullname,
		&i.Phone,
		&i.Address,
		&i.Avatar,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT user_id, username, password, permission, login_provider, provider_id, account_id, created_at, fullname, phone, address, avatar FROM users u
WHERE u.username = $1
`

func (q *Queries) GetUserByUsername(ctx context.Context, username *string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Permission,
		&i.LoginProvider,
		&i.ProviderID,
		&i.AccountID,
		&i.CreatedAt,
		&i.Fullname,
		&i.Phone,
		&i.Address,
		&i.Avatar,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT user_id, username, password, permission, login_provider, provider_id, account_id, created_at, fullname, phone, address, avatar FROM users
`

func (q *Queries) GetUsers(ctx context.Context) (User, error) {
	row := q.db.QueryRow(ctx, getUsers)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Permission,
		&i.LoginProvider,
		&i.ProviderID,
		&i.AccountID,
		&i.CreatedAt,
		&i.Fullname,
		&i.Phone,
		&i.Address,
		&i.Avatar,
	)
	return i, err
}
